Benodigdheden:
1 LCD-scherm met I2C-module (4-pins)
Hiermee kun je tekst weergeven, zoals een getal, temperatuur of melding.

2 Drukknoppen 
Hiermee kun je bijvoorbeeld iets op het scherm aanpassen.
Bijvoorbeeld:

Linker knop = teller omhoog

Rechter knop = teller omlaag

2 Weerstanden (10k ohm)
Deze zijn aangesloten op de drukknoppen als pull-down weerstanden. Ze zorgen ervoor dat de Arduino geen "willekeurige" signalen leest wanneer je niet drukt.

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2); // LCD scherm met I2C-adres 0x27

const int btnStartLap = 9;
const int btnPauseReset = 10;

bool running = false;
unsigned long startTime = 0;
unsigned long pauseOffset = 0;
unsigned long lapTime = 0;

void setup() {
  pinMode(btnStartLap, INPUT_PULLUP);
  pinMode(btnPauseReset, INPUT_PULLUP);
  
  lcd.init();        // LCD initialiseren
  lcd.backlight();   // Achtergrondverlichting aan
  lcd.setCursor(0, 0);
  lcd.print("Stopwatch Ready");

  delay(1000);
  lcd.clear();
}

/**
 * De hoofdloop leest beide knoppen uit.
 * - Korte druk op knop 1 start of hervat de stopwatch.
 * - Lange druk op knop 1 toont een tussenronde.
 * - Knop 2 pauzeert de stopwatch.
 * - Beide knoppen samen resetten de teller.
 *
 * @author: Jesse van Dijk
 * @source: Gebaseerd op eigen interpretatie van debounce- en millis()gebruik.
 */
void loop() {
  bool btn1 = digitalRead(btnStartLap) == LOW;
  bool btn2 = digitalRead(btnPauseReset) == LOW;

  static bool btn1Held = false;
  static unsigned long btn1PressTime = 0;
  static unsigned long bothPressedTime = 0;

  // Beide knoppen tegelijk = stopwatch resetten
  if (btn1 && btn2) {
    if (bothPressedTime == 0) {
      bothPressedTime = millis();
    } else if (millis() - bothPressedTime > 200) {
      running = false;
      startTime = 0;
      lapTime = 0;
      pauseOffset = 0;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Reset Stopwatch");
      delay(1000);
      lcd.clear();
    }
  } else {
    bothPressedTime = 0;
  }

  // Knop 1: korte of lange druk
  if (btn1 && !btn1Held) {
    btn1Held = true;
    btn1PressTime = millis();
  }

  if (!btn1 && btn1Held) {
    unsigned long pressDuration = millis() - btn1PressTime;
    if (pressDuration >= 2000) {
      // Lange druk = Lap (tussenronde)
      if (running) {
        lapTime = millis() - startTime;
        lcd.setCursor(0, 1);
        lcd.print("Lap: ");
        printTime(lapTime);
      }
    } else {
      // Korte druk = Start of hervat
      if (!running) {
        running = true;
        startTime = millis() - pauseOffset;
      }
    }
    btn1Held = false;
  }

  // Knop 2: pauze
  static bool btn2WasPressed = false;
  if (btn2 && !btn2WasPressed) {
    if (running) {
      running = false;
      pauseOffset = millis() - startTime;
    }
    btn2WasPressed = true;
  }
  if (!btn2) {
    btn2WasPressed = false;
  }

  // Tijd bijwerken tijdens het lopen
  if (running) {
    lcd.setCursor(0, 0);
    lcd.print("Time: ");
    printTime(millis() - startTime);
  }

  delay(50); // eenvoudige debounce
}

/**
 * Toont de tijd in het formaat mm:ss.tt
 *
 * @param timeMs De verstreken tijd in milliseconden
 *
 * @source: https://www.tinkercad.com/embed/2QikRgtumnX?editbtn=1 & ChatGPT
 */
void printTime(unsigned long timeMs) {
  int minutes = (timeMs / 60000);
  int seconds = (timeMs % 60000) / 1000;
  int tenths = (timeMs % 1000) / 10;

  if (minutes < 10) lcd.print("0");
  lcd.print(minutes);
  lcd.print(":");

  if (seconds < 10) lcd.print("0");
  lcd.print(seconds);
  lcd.print(".");

  if (tenths < 10) lcd.print("0");
  lcd.print(tenths);
  lcd.print(" ");
}

